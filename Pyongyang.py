# checkers_module.py
# –®–∞—à–∫–∏ –¥–ª—è Telethon Userbot
# –ê–≤—Ç–æ—Ä: @YourName | –í–µ—Ä—Å–∏—è: 2.2

import copy
from telethon import events, Button

active_games = {}
saved_games = {}

MODULE_NAME = "CheckersGame"
MODULE_VERSION = "2.2"
MODULE_AUTHOR = "@YourName"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∏–µ–Ω—Ç–∞
client = None


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
async def start_game(event):
    chat_id = event.chat_id
    user_id = event.sender_id
    active_games[chat_id] = {
        "board": init_board(),
        "turn": "w",
        "host": user_id,
        "multi_jump": None,
        "selected": None,
        "settings": {"force_take": True, "host_color": "w"}
    }
    await event.respond("‚ôüÔ∏è –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –•–æ–¥—è—Ç –±–µ–ª—ã–µ",
                        buttons=render_inline_board(active_games[chat_id]["board"]))


async def resume_game(event):
    chat_id = event.chat_id
    if chat_id in saved_games:
        active_games[chat_id] = copy.deepcopy(saved_games[chat_id])
        await event.respond("‚ôüÔ∏è –ò–≥—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!",
                            buttons=render_inline_board(active_games[chat_id]["board"]))
    else:
        await event.respond("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏–≥—Ä—ã")


async def checkers_info(event):
    await event.respond(f"üì¶ –ú–æ–¥—É–ª—å: {MODULE_NAME}\n"
                        f"üîñ –í–µ—Ä—Å–∏—è: {MODULE_VERSION}\n"
                        f"üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {MODULE_AUTHOR}")


async def handle_callback(event):
    # –ª–æ–≥–∏–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ (—Å–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
    await event.answer("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞!")


# ========== –î–û–°–ö–ê ==========
def render_inline_board(board, highlight=None):
    symbols = {".": "‚¨ú", "w": "‚ö™", "b": "‚ö´", "W": "üîµ", "B": "üî¥"}
    rows = []
    for i in range(8):
        row = []
        for j in range(8):
            row.append(Button.inline(symbols[board[i][j]], f"cell:{i}:{j}"))
        rows.append(row)
    rows.append([Button.inline("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "save_game")])
    return rows


def init_board():
    board = [["." for _ in range(8)] for _ in range(8)]
    for i in range(3):
        for j in range(8):
            if (i + j) % 2 == 1:
                board[i][j] = "b"
    for i in range(5, 8):
        for j in range(8):
            if (i + j) % 2 == 1:
                board[i][j] = "w"
    return board


# ========== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ==========
def register(c=None):
    """
    –ï—Å–ª–∏ loader –≤—ã–∑—ã–≤–∞–µ—Ç register() –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ‚Äî –∫–ª–∏–µ–Ω—Ç –∏—â–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –æ–±—ä–µ–∫—Ç TelegramClient ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.
    """
    global client
    if c is not None:
        client = c

    if client is None or isinstance(client, str):
        raise ValueError("‚ùå –û—à–∏–±–∫–∞: client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. "
                         "–ü–µ—Ä–µ–¥–∞–π —Å—é–¥–∞ –æ–±—ä–µ–∫—Ç Telethon TelegramClient.")

    client.add_event_handler(start_game, events.NewMessage(pattern=r"\.checkers"))
    client.add_event_handler(resume_game, events.NewMessage(pattern=r"\.checkers_resume"))
    client.add_event_handler(checkers_info, events.NewMessage(pattern=r"\.checkers_info"))
    client.add_event_handler(handle_callback, events.CallbackQuery)
