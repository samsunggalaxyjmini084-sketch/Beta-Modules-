# checkers_game.py
# –ú–æ–¥—É–ª—å —à–∞—à–µ–∫ –¥–ª—è —é–∑–µ—Ä–±–æ—Ç–∞ (Telethon)
# –ê–≤—Ç–æ—Ä: @YourName | –í–µ—Ä—Å–∏—è: 2.0

import copy
from telethon import events, Button

active_games = {}
saved_games = {}

MODULE_NAME = "CheckersGame"
MODULE_VERSION = "2.0"
MODULE_AUTHOR = "@YourName"


# ====== –ö–æ–º–∞–Ω–¥–∞: —Å—Ç–∞—Ä—Ç –Ω–æ–≤–æ–π –∏–≥—Ä—ã ======
@events.register(events.NewMessage(pattern=r"\.checkers"))
async def start_game(event):
    chat_id = event.chat_id
    user_id = event.sender_id

    active_games[chat_id] = {
        "board": init_board(),
        "turn": "w",
        "host": user_id,
        "multi_jump": None,
        "selected": None,  # –≤—ã–±—Ä–∞–Ω–Ω–∞—è —à–∞—à–∫–∞
        "settings": {
            "force_take": True,
            "host_color": "w"
        }
    }

    game = active_games[chat_id]
    await event.respond(
        f"‚ôüÔ∏è –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–•–æ–¥—è—Ç: –±–µ–ª—ã–µ",
        buttons=render_inline_board(game["board"])
    )


# ====== –ò–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–±–æ—Ç–∫–∞ ======
@events.register(events.CallbackQuery)
async def handle_callback(event):
    data = event.data.decode("utf-8")
    chat_id = event.chat_id

    if chat_id not in active_games:
        await event.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã")
        return

    game = active_games[chat_id]

    # ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
    if data == "toggle_force":
        game["settings"]["force_take"] = not game["settings"]["force_take"]
        await event.edit(
            f"‚ôüÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è: {'‚úÖ' if game['settings']['force_take'] else '‚ùå'}",
            buttons=render_inline_board(game["board"])
        )
        return
    elif data == "switch_color":
        game["settings"]["host_color"] = "b" if game["settings"]["host_color"] == "w" else "w"
        await event.edit(
            f"‚ôüÔ∏è –•–æ—Å—Ç —Ç–µ–ø–µ—Ä—å –∑–∞ {'–±–µ–ª—ã—Ö' if game['settings']['host_color']=='w' else '—á—ë—Ä–Ω—ã—Ö'}",
            buttons=render_inline_board(game["board"])
        )
        return
    elif data == "save_game":
        saved_games[chat_id] = copy.deepcopy(game)
        await event.answer("üíæ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", alert=True)
        return

    # ====== –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ======
    parts = data.split(":")
    if parts[0] == "cell":
        x, y = int(parts[1]), int(parts[2])

        # –µ—Å–ª–∏ —à–∞—à–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –ø–æ—Ö–æ–¥–∏—Ç—å
        if game["selected"]:
            sx, sy = game["selected"]
            ok, new_board, msg, extra_jump = try_move(
                game["board"], sx, sy, x, y,
                game["turn"],
                game["settings"]["force_take"],
                game["multi_jump"]
            )
            if ok:
                game["board"] = new_board
                game["multi_jump"] = extra_jump
                game["selected"] = None

                # –ø–æ–±–µ–¥–∞?
                winner = check_winner(new_board)
                if winner:
                    await event.edit(
                        f"üèÜ –ü–æ–±–µ–¥–∏–ª–∏ {'–±–µ–ª—ã–µ' if winner=='w' else '—á—ë—Ä–Ω—ã–µ'}!",
                        buttons=render_inline_board(new_board)
                    )
                    del active_games[chat_id]
                    return

                if extra_jump:
                    game["selected"] = (x, y)
                    await event.edit(
                        f"‚öîÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏ –±–æ–π —Ç–æ–π –∂–µ —à–∞—à–∫–æ–π!",
                        buttons=render_inline_board(new_board, highlight=(x, y))
                    )
                    return

                game["turn"] = "b" if game["turn"] == "w" else "w"
                await event.edit(
                    f"‚úÖ –•–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {msg}\n–¢–µ–ø–µ—Ä—å —Ö–æ–¥—è—Ç: {'–±–µ–ª—ã–µ' if game['turn']=='w' else '—á—ë—Ä–Ω—ã–µ'}",
                    buttons=render_inline_board(new_board)
                )
            else:
                game["selected"] = None
                await event.answer(msg, alert=True)

        else:
            # –≤—ã–±–∏—Ä–∞–µ–º —à–∞—à–∫—É
            piece = game["board"][x][y]
            if piece != "." and piece.lower() == game["turn"]:
                game["selected"] = (x, y)
                await event.edit(
                    f"‚ôüÔ∏è –í—ã–±—Ä–∞–Ω–∞ —à–∞—à–∫–∞ ({x},{y})",
                    buttons=render_inline_board(game["board"], highlight=(x, y))
                )
            else:
                await event.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ—è —à–∞—à–∫–∞", alert=True)


# ====== –î–æ—Å–∫–∞ –∫–Ω–æ–ø–∫–∞–º–∏ ======
def render_inline_board(board, highlight=None):
    symbols = {
        ".": "‚¨ú",
        "w": "‚ö™",
        "b": "‚ö´",
        "W": "üîµ",
        "B": "üî¥"
    }
    rows = []
    for i in range(8):
        row = []
        for j in range(8):
            label = symbols[board[i][j]]
            if highlight and (i, j) == highlight:
                label = "‚≠ê"
            row.append(Button.inline(label, f"cell:{i}:{j}"))
        rows.append(row)
    # –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    rows.append([
        Button.inline("‚öñÔ∏è –û–±—è–∑. –≤–∑—è—Ç–∏–µ", "toggle_force"),
        Button.inline("üîÑ –¶–≤–µ—Ç —Ö–æ—Å—Ç–∞", "switch_color"),
        Button.inline("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "save_game"),
    ])
    return rows


# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å–∫–∏ ======
def init_board():
    board = [["." for _ in range(8)] for _ in range(8)]
    for i in range(3):
        for j in range(8):
            if (i + j) % 2 == 1:
                board[i][j] = "b"
    for i in range(5, 8):
        for j in range(8):
            if (i + j) % 2 == 1:
                board[i][j] = "w"
    return board


# ====== –õ–æ–≥–∏–∫–∞ —Ö–æ–¥–æ–≤ ======
def try_move(board, x1, y1, x2, y2, turn, force_take, multi_jump):
    if not (0 <= x1 < 8 and 0 <= y1 < 8 and 0 <= x2 < 8 and 0 <= y2 < 8):
        return False, board, "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ—Å–∫–∏", None

    piece = board[x1][y1]
    if piece == ".":
        return False, board, "–¢–∞–º –Ω–µ—Ç —à–∞—à–∫–∏", None
    if piece.lower() != turn:
        return False, board, "–•–æ–¥ –Ω–µ –≤–∞—à–µ–≥–æ —Ü–≤–µ—Ç–∞", None

    if multi_jump and (x1, y1) != multi_jump:
        return False, board, "–¢—ã –æ–±—è–∑–∞–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–æ–π –∂–µ —à–∞—à–∫–æ–π", None

    if board[x2][y2] != ".":
        return False, board, "–ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞", None

    dx, dy = x2 - x1, y2 - y1
    step_x = 1 if dx > 0 else -1
    step_y = 1 if dy > 0 else -1

    new_board = copy.deepcopy(board)
    captured = False

    # –¥–∞–º–∫–∏
    if piece in ("W", "B"):
        if abs(dx) != abs(dy):
            return False, board, "–î–∞–º–∫–∞ —Ö–æ–¥–∏—Ç –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏", None

        cx, cy = x1 + step_x, y1 + step_y
        beaten = []
        while cx != x2 and cy != y2:
            if new_board[cx][cy] != ".":
                if new_board[cx][cy].lower() == turn:
                    return False, board, "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞—Ç—å —Å–≤–æ–∏", None
                if beaten:
                    return False, board, "–ú–æ–∂–Ω–æ –±–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —à–∞—à–∫—É –∑–∞ —Ä–∞–∑", None
                beaten.append((cx, cy))
            cx += step_x
            cy += step_y

        if beaten:
            bx, by = beaten[0]
            new_board[bx][by] = "."
            captured = True

        new_board[x1][y1] = "."
        new_board[x2][y2] = piece

    # –æ–±—ã—á–Ω—ã–µ —à–∞—à–∫–∏
    else:
        if abs(dx) == 1 and abs(dy) == 1 and not force_take:
            if (turn == "w" and dx == -1) or (turn == "b" and dx == 1):
                new_board[x1][y1] = "."
                new_board[x2][y2] = piece
            else:
                return False, board, "–ù–µ–ª—å–∑—è —Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥", None
        elif abs(dx) == 2 and abs(dy) == 2:
            mx, my = (x1 + x2) // 2, (y1 + y2) // 2
            if new_board[mx][my] != "." and new_board[mx][my].lower() != turn:
                new_board[mx][my] = "."
                new_board[x1][y1] = "."
                new_board[x2][y2] = piece
                captured = True
            else:
                return False, board, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤–∑—è—Ç–∏–µ", None
        else:
            return False, board, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ–¥", None

    # –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –¥–∞–º–∫—É
    if x2 == 0 and piece == "w":
        new_board[x2][y2] = "W"
    if x2 == 7 and piece == "b":
        new_board[x2][y2] = "B"

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–æ—è
    if captured and has_more_captures(new_board, x2, y2):
        return True, new_board, f"({x1},{y1}) ‚Üí ({x2},{y2})", (x2, y2)

    return True, new_board, f"({x1},{y1}) ‚Üí ({x2},{y2})", None


def has_more_captures(board, x, y):
    piece = board[x][y]
    dirs = [(-1, -1), (-1, 1), (1, -1), (1, 1)]
    if piece in ("w", "b"):
        for dx, dy in dirs:
            nx, ny = x + 2*dx, y + 2*dy
            mx, my = x + dx, y + dy
            if 0 <= nx < 8 and 0 <= ny < 8:
                if board[nx][ny] == "." and board[mx][my] != "." and board[mx][my].lower() != piece.lower():
                    return True
    else:  # –¥–∞–º–∫–∏
        for dx, dy in dirs:
            cx, cy = x + dx, y + dy
            found_enemy = False
            while 0 <= cx+dx < 8 and 0 <= cy+dy < 8:
                if board[cx][cy] == ".":
                    if found_enemy:
                        return True
                elif board[cx][cy].lower() != piece.lower() and not found_enemy:
                    found_enemy = True
                else:
                    break
                cx += dx
                cy += dy
    return False


def check_winner(board):
    has_w = any(cell.lower() == "w" for row in board for cell in row)
    has_b = any(cell.lower() == "b" for row in board for cell in row)
    if not has_w:
        return "b"
    if not has_b:
        return "w"
    return None


# ====== –ò–Ω—Ñ–æ –æ –º–æ–¥—É–ª–µ ======
@events.register(events.NewMessage(pattern=r"\.checkers_info"))
async def checkers_info(event):
    await event.respond(
        f"üì¶ –ú–æ–¥—É–ª—å: {MODULE_NAME}\n"
        f"üîñ –í–µ—Ä—Å–∏—è: {MODULE_VERSION}\n"
        f"üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {MODULE_AUTHOR}"
    )
